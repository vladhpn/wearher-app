{"version":3,"sources":["components/SearchBar/SearchBar.jsx","server-api/server.js","ser/server.js","components/WeatherData/WeatherData.jsx","App.jsx","reportWebVitals.ts","index.tsx"],"names":["SearchBar","onSubmit","useState","query","setQuery","event","preventDefault","value","onChange","target","type","autoComplete","autoFocus","placeholder","fetchWeather","searchQuery","axios","get","then","data","catch","err","console","log","WeatherData","weather","App","cityWeather","setCityWeather","setSearchQuery","setLoading","city","setCity","country","setCountry","temp","setTemp","clouds","setClouds","humidity","setHumidity","wind","setWind","text","setText","code","setCode","icon","setIcon","useEffect","prev","finally","length","location","name","current","temp_c","cloud","wind_kph","condition","now","moment","format","src","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e90bbff9.chunk.js","sourcesContent":["import { useState } from \"react\"\n\nconst SearchBar = ({onSubmit}) => {\n\n    const [query, setQuery] = useState('')\n\n    const handleChange = (event) => {\n        setQuery(event.target.value)\n    }\n\n    const handleSubmit =(event)=>{\n        event.preventDefault()\n        onSubmit(query)\n        setQuery('')\n    }\n\n    return(\n        <form onSubmit={handleSubmit}>\n            <input\n            value ={query} onChange={handleChange}\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search citi\"></input>\n        </form>\n    )\n}\n\nexport default SearchBar","import axios from 'axios';\nimport { AUTH_TOKEN } from '../ser/server';\n\n// axios.defaults.baseURL = 'https://api.openweathermap.org/data/2.5';\n\n// const fetchWeather = (searchQuery) => {\n//   return axios\n//     .get(`/weather?q=${searchQuery}&lang=en&appid=${AUTH_TOKEN}`)\n//     .then(({ data }) => data)\n//     .catch((err) => console.log(err));\n// // };\n\nconst fetchWeather = (searchQuery) => {\n  return axios\n    .get(\n      `http://api.weatherapi.com/v1/current.json?key=${AUTH_TOKEN}&q=${searchQuery}&aqi=no&lang=uk`\n    )\n    .then(({ data }) => data)\n    .catch((err) => console.log(err));\n};\n\nexport default fetchWeather;\n","export const AUTH_TOKEN = 'ba953cbd1f1046589e7151922212411';\n","\nconst WeatherData = ({weather}) => {\n    // console.log(weather)\n    return(\n        <div>{weather.data}</div>\n    )\n}\n\nexport default WeatherData","import {useState, useEffect} from 'react'\nimport SearchBar from './components/SearchBar'\nimport fetchWeather from './server-api/server'\nimport WeatherData from './components/WeatherData'\nimport moment from 'moment'\n\n\nfunction App() {\n  const [cityWeather, setCityWeather] = useState([])\n  const [searchQuery, setSearchQuery] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [city, setCity] = useState('')\n  const [country, setCountry] = useState('')\n  const [temp, setTemp] = useState('')\n  const [clouds, setClouds] = useState('')\n  const [humidity, setHumidity] = useState('')\n  const [wind, setWind] =useState('')\n  const [text, setText] = useState('')\n  const [code, setCode] = useState('')\n  const [icon, setIcon] = useState('')\n\n  useEffect(() => {\n    if(!searchQuery) return\n    setLoading(true)\n    fetchWeather(searchQuery).then(data => setCityWeather(prev => [data]))\n    .finally(() => setLoading(false))\n   \n  }, [searchQuery])\n\n  console.log(cityWeather)\n\n\n  useEffect(() => {\n    if(cityWeather.length > 0){\n      setCity(cityWeather[0].location.name)\n      setCountry(cityWeather[0].location.country)\n      setTemp(cityWeather[0].current.temp_c)\n      setHumidity(cityWeather[0].current.humidity)\n      setClouds(cityWeather[0].current.cloud)\n      setWind(cityWeather[0].current.wind_kph)\n      setText(cityWeather[0].current.condition.text)\n      setCode(cityWeather[0].current.condition.code)\n      setIcon(cityWeather[0].current.condition.icon)\n    }\n  },[cityWeather])\n\n\nconst now = moment()\n  console.log(now.format('LLLL'));\n\n  const onChangeQuery = (searchQuery) => {\n    setSearchQuery(searchQuery)\n  }\n\n  return (\n    <>\n  <SearchBar onSubmit={onChangeQuery}/>\n    <WeatherData  weather={cityWeather}/>\n\n    {city}{country}\n    <p>температура: {temp}&deg;</p>\n\n    <p>скорость ветрка {wind}км/ч</p>\n    \n    <p>владжность: {humidity}</p>\n    <p>облачность: {clouds}</p>\n    <p>text: {text} </p>\n    <p>код погоды: {code}</p>\n\n    \n<img src={icon}  alt='logo'/>\n\n    {/* https://cdn.weatherapi.com/weather/64x64/day/389.png */}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}